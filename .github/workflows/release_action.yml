name: Build and Distribute Flutter App

on:
  push:
    branches:
      - 'release/**'
  create:
    branches:
      - 'release/**'

env:
  FLUTTER_VERSION: '3.29.3'
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk --release

      - name: Setup Firebase CLI
        run: |
          npm install -g firebase-tools

      - name: Upload APK to Firebase App Distribution
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > firebase-service-account.json
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups punchbowl \
            --release-notes "Automated build from branch: ${{ github.ref_name }}, Commit: ${{ github.sha }}" \
            --service-account firebase-service-account.json
          rm firebase-service-account.json

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: com.example.pedroschwarz.taskMaster
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Build iOS IPA
        run: |
          flutter build ios --release --no-codesign

          cd ios

          xcodebuild -workspace Runner.xcworkspace \
                     -scheme Runner \
                     -configuration Release \
                     -archivePath Runner.xcarchive \
                     -destination 'generic/platform=iOS' \
                     CODE_SIGN_STYLE=Manual \
                     CODE_SIGN_IDENTITY="Apple Distribution" \
                     PROVISIONING_PROFILE_SPECIFIER="Task Master Ad Hoc Profile" \
                     archive

          xcodebuild -exportArchive \
                     -archivePath Runner.xcarchive \
                     -exportPath build \
                     -exportOptionsPlist ExportOptions.plist

      - name: Setup Firebase CLI
        run: |
          npm install -g firebase-tools

      - name: Upload IPA to Firebase App Distribution
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > firebase-service-account.json
          firebase appdistribution:distribute ios/build/*.ipa \
            --app ${{ secrets.FIREBASE_IOS_APP_ID }} \
            --groups punchbowl \
            --release-notes "Automated build from branch: ${{ github.ref_name }}, Commit: ${{ github.sha }}" \
            --service-account firebase-service-account.json
          rm firebase-service-account.json

      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/*.ipa

  notify-completion:
    name: Notify Build Completion
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always()

    steps:
      - name: Notify Success
        if: needs.build-android.result == 'success' && needs.build-ios.result == 'success'
        run: |
          echo "✅ Both Android and iOS builds completed successfully!"
          echo "Apps have been uploaded to Firebase App Distribution"

      - name: Notify Failure
        if: needs.build-android.result == 'failure' || needs.build-ios.result == 'failure'
        run: |
          echo "❌ One or more builds failed:"
          echo "Android: ${{ needs.build-android.result }}"
          echo "iOS: ${{ needs.build-ios.result }}"